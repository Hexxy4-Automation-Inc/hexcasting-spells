#git(/libs/dictonary.hexpattern)
#git(/libs/akasha.hexpattern)
#git(/libs/raycast.hexpattern)

// ==============================================================================
// ==============================================================================
// ==========================         PATTERNS         ==========================
// ==============================================================================
// ==============================================================================

#def(true)(
    True Reflection
)

#def(false)(
    False Reflection
)

#def(leftclick)(
    @pattern(NORTH_EAST,qadee)
)

#def(rightclick)(
    @pattern(NORTH_WEST,edaqq)
)

#def(iotatype)(
    @pattern(SOUTH_EAST,awd)
)

#def(bettersurgeon)(
    @pattern(EAST,dedqdewqaeaq)
)

#def(exposeMind)(
    @pattern(NORTH_EAST,eqeeedqadqqqqqdeewewewe)
)

#def(illuminate)(
    @pattern(SOUTH_EAST,aeaeaeaeaeawqqqqq)
)

#def(personal_property)(
    @pattern(SOUTH_WEST,wwwwwaqwwewwqwqqwwaeawqawwwwawwwwawwwqawwdww)
)

#def(personal_gate)(
    @pattern(SOUTH_WEST,wwwwwaqwwewwqwqqwwaeawqawwwqwwwawwwqa)
)

// ==============================================================================
// ==============================================================================
// ==========================           CONF           ==========================
// ==============================================================================
// ==============================================================================

#def(publicAmethystMote)(
    // Hexxy3
    // {@mote(9edbd419-fd25-4c1f-8642-4529366e40a8,pseudoamethyst_shard,12c34b86-7ded-46c7-b000-2398c879fb92)} >>


)

// ==============================================================================
// ==============================================================================
// ==========================        FUNCTIONS         ==========================
// ==============================================================================
// ==============================================================================


// ==============================================================================
// ==========================         BASE FUNC        ==========================
// ==============================================================================

#def(indexof)(
    Gemini Decomposition
    { @str(<1>) } >>
    Locator's Distillation
)

#def(centerVec)(
    Floor Purification
    {@vec(0.5,0.5,0.5)}>>
    Additive Distillation
)

// 6 + var patterns
// do (patterns) else (patterns) based on bool before
// Evaluates the second arg if true, evaluates the third if false
#def(fastif)(
    {
        <1>
    }
    {
        <2>
    }
    Augur's Exaltation
    Hermes' Gambit
)

// 6 + var patterns
// if (bool) do (patterns) else (patterns)
// Evaluates the second arg if true, evaluates the third if false
#def(if)(
    <1>
    $fastif(<2>)(<3>)
)

// 6 + var patterns
#def(runif)(
    <1>
    $fastif(<2>)()
)

// for_each in (list) do (patterns)
// Runs Thoth's on the given list and pattern list, returning a list containing all outputs
#def(foreach)(
    {
        <2>
    }
    <1>
    Thoth's Gambit
)

// prints passed string and removes it from stack
#def(print)(
    {@str(<1>)} >>
    Reveal
    Bookkeeper's Gambit: v
)

// insert string as text iota
#def(textIota)(
    {@str(<1>)} >>
    Reading Purification
)

// stack: string
#def(toHexicon)(
    False Reflection
    Case Distillation
    Blank Reflection
    Separation Distillation
    Blank Reflection
    Single's Purification
    Exclusion Distillation
    $akasha
    {@hexicon(hexicon)} >>
    Akasha's Distillation
    {
        Sekhmet's Gambit: 2
        $dictRead
        Gemini Decomposition
        Augur's Purification
        {
            Chirographer's Purification
            Flock's Disintegration
        }
        {
            Bookkeeper's Gambit: v
        }
        Augur's Exaltation
        Hermes' Gambit
    }
    Rotation Gambit
    Thoth's Gambit

    Gemini Decomposition
    Augur's Purification
    {
        Calligrapher's Purification
        Bookkeeper's Gambit: v-
    }
    {
        Bookkeeper's Gambit: vv
        Nullary Reflection
    }
    Augur's Exaltation
    Hermes' Gambit
)

// stack: pattern
#def(fromHexicon)(
    Chirographer's Purification

    { // while not empty
        Sekhmet's Gambit: 2
        // stack: abc_pattern_dict, [to_convert_list, result]
        Flock's Disintegration
        Reflecting Gambit
        // stack: result, to_convert_list, abc_pattern_dict
        Flock's Disintegration
        // stack: result, to_convert_list, abc_patterns, abc_strings
        Rotation Gambit II
        // stack: result, abc_strings, to_convert_list, abc_patterns
        Undertaker's Gambit
        // stack: result, abc_strings, abc_patterns, to_convert_list, abc_patterns
        { // for each pattern - break when finds pattern
            // stack: to_convert_list, abc_pattern
            Sekhmet's Gambit: 2
            Chirographer's Purification
            Undertaker's Gambit
            Length Purification
            // stack: abc_pattern, to_convert_list, abc_pattern_length
            Prospector's Gambit
            Length Purification
            Prospector's Gambit
            // stack: abc_pattern, to_convert_list, abc_pattern_length, to_convert_list_length, abc_pattern_length
            Minimus Distillation 
            {
                {
                    Tutu's Gambit
                }
            }
            {
                // stack: abc_pattern, to_convert_list, abc_pattern_length
                Numerical Reflection: 0
                Jester's Gambit
                Selection Exaltation

                // Flock's Reflection
                // Flock's Gambit
                // Reveal
                // Flock's Disintegration

                Undertaker's Gambit
                Equality Distillation
                {
                    {
                        Charon's Gambit
                    }
                }
                {
                    {
                        Tutu's Gambit
                    }
                }
                Augur's Exaltation
                Hermes' Gambit
            }
            Augur's Exaltation
            Hermes' Gambit
            
            Flock's Disintegration
            Sekhmet's Gambit: 1
            Hermes' Gambit
            Numerical Reflection: 0
        }
        Jester's Gambit
        // stack: result, abc_strings, abc_patterns, to_convert_list, abc_patterns, [num/empty]
        Thoth's Gambit
        // stack: result, abc_strings, abc_patterns, to_convert_list, [num/empty]
        Bubbling Gambit
        // stack: result, abc_strings, to_convert_list, abc_patterns, [num/empty]

        // stack: result, abc_strings, to_convert_list, abc_patterns, [num/empty]
        Length Purification
        Prospector's Gambit
        Length Purification
        Prospector's Gambit
        Inequality Distillation
        {
            // stack: result, abc_strings, to_convert_list, abc_patterns, num
            Numerical Reflection: -2
            Fisherman's Gambit II
            // stack: result, abc_strings, num, to_convert_list, abc_patterns, num
            Selection Distillation
            Chirographer's Purification
            Length Purification
            Prospector's Gambit
            Length Purification
            Selection Exaltation
            // stack: result, abc_strings, num, to_convert_list_sliced
            Numerical Reflection: -3
            Fisherman's Gambit
            Selection Distillation
            Additive Distillation
            // stack: to_convert_list_sliced, result
            Prospector's Gambit
            Augur's Purification
            {
                Numerical Reflection: 2
                Flock's Gambit
                Pollux's Gambit
                Sekhmet's Gambit: 0
            }
            {
                Sekhmet's Gambit: 1
                // stack: result
            }
            Augur's Exaltation
            Hermes' Gambit
        }
        {
            // No patterns found. PANIC AND THROW ERROR OR SHIT
        }
        Augur's Exaltation
        Hermes' Gambit
    }
    $akasha
    {@hexicon(hexicon)} >>
    Akasha's Distillation
    Retrograde Purification
    Reflecting Gambit
    // stack: pattern_dict, commands, to_convert_list
    Blank Reflection
    Numerical Reflection: 2
    Flock's Gambit
    Single's Purification
    // stack: pattern_dict, commands, [[to_convert_list, string]]
    Thoth's Gambit
    Flock's Disintegration
    Bookkeeper's Gambit: v-
)

// ==============================================================================
// ==========================           MISC           ==========================
// ==============================================================================

#def(dump)(
    Flock's Reflection
    Flock's Gambit
    {@str(<1>)}>>
    Speaker's Distillation
    Reveal
    Speaker's Decomposition
    Bookkeeper's Gambit: v
    Flock's Disintegration
)

#def(saferead)(
    Auditor's Reflection
    $fastif(
        Scribe's Reflection
    )()
)

#def(safewrite)(
    Assessor's Reflection
    $fastif(
        Scribe's Gambit
    )()
)

#def(isInWorldBounds)(
    Vector Disintegration
    Bookkeeper's Gambit: v-v
    Gemini Decomposition
    Spatial Reflection
    Atlas' Decomposition
    Reflecting Gambit
    Minimus Distillation II
    Reflecting Gambit
    Maximus Distillation II
    Conjunction Distillation
    // stack: bool
)

#def(casterInWorldBounds)(
    Mind's Reflection
    Compass' Purification II
    $isInWorldBounds
)

#def(hasMinMedia)(
    Mind's Reflection
    Media Purification
    Numerical Reflection: 20
    Subtractive Distillation
    Numerical Reflection: <1>
    Maximus Distillation II
)


// ==============================================================================
// ==========================         CASSETTES        ==========================
// ==============================================================================

// starts thread to cast every n ticks 
// params - 
//      <1> name: string, 
//      <2> n: number, 
//      <3> loop: bool, 
//      <4> hex: many iotas
#def(start_thread)(
    {
        <4>
        $if(<3>)(
            {@str(<1>)} >>
            Program Purification
            Numerical Reflection: <2>
            {@str(<1>)} >>
            Enqueue
        )()
    }
    Numerical Reflection: <2>
    {@str(<1>)} >>
    Enqueue

)