#git(/libs/dictonary.hexpattern)
#git(/libs/akasha.hexpattern)

// ==============================================================================
// ==============================================================================
// ==========================         PATTERNS         ==========================
// ==============================================================================
// ==============================================================================

#def(true)(
    True Reflection
)

#def(false)(
    False Reflection
)

#def(leftclick)(
    @pattern(NORTH_EAST,qadee)
)

#def(rightclick)(
    @pattern(NORTH_WEST,edaqq)
)

#def(iotatype)(
    @pattern(SOUTH_EAST,awd)
)

#def(bettersurgeon)(
    @pattern(EAST,dedqdewqaeaq)
)

#def(exposeMind)(
    @pattern(NORTH_EAST,eqeeedqadqqqqqdeewewewe)
)

#def(illuminate)(
    @pattern(SOUTH_EAST,aeaeaeaeaeawqqqqq)
)

#def(personal_property)(
    @pattern(SOUTH_WEST,wwwwwaqwwewwqwqqwwaeawqawwwwawwwwawwwqawwdww)
)

#def(personal_gate)(
    @pattern(SOUTH_WEST,wwwwwaqwwewwqwqqwwaeawqawwwqwwwawwwqa)
)

// ==============================================================================
// ==============================================================================
// ==========================           CONF           ==========================
// ==============================================================================
// ==============================================================================

#def(publicAmethystMote)(
    // Hexxy3
    // {@mote(9edbd419-fd25-4c1f-8642-4529366e40a8,pseudoamethyst_shard,12c34b86-7ded-46c7-b000-2398c879fb92)} >>


)

// ==============================================================================
// ==============================================================================
// ==========================        FUNCTIONS         ==========================
// ==============================================================================
// ==============================================================================


// ==============================================================================
// ==========================         BASE FUNC        ==========================
// ==============================================================================

#def(indexof)(
    Gemini Decomposition
    { @str(<1>) } >>
    Locator's Distillation
)

#def(centerVec)(
    Floor Purification
    {@vec(0.5,0.5,0.5)}>>
    Additive Distillation
)

// 6 + var patterns
// do (patterns) else (patterns) based on bool before
// Evaluates the second arg if true, evaluates the third if false
#def(fastif)(
    {
        <1>
    }
    {
        <2>
    }
    Augur's Exaltation
    Hermes' Gambit
)

// 6 + var patterns
// if (bool) do (patterns) else (patterns)
// Evaluates the second arg if true, evaluates the third if false
#def(if)(
    <1>
    $fastif(<2>)(<3>)
)

// 6 + var patterns
#def(runif)(
    <1>
    $fastif(<2>)()
)

// for_each in (list) do (patterns)
// Runs Thoth's on the given list and pattern list, returning a list containing all outputs
#def(foreach)(
    {
        <2>
    }
    <1>
    Thoth's Gambit
)

// prints passed string and removes it from stack
#def(print)(
    {@str(<1>)} >>
    Reveal
    Bookkeeper's Gambit: v
)

// stack: string
#def(toHexicon)(
    False Reflection
    Case Distillation
    Blank Reflection
    Separation Distillation
    Blank Reflection
    Single's Purification
    Exclusion Distillation
    $akasha
    {@hexicon(hexicon)} >>
    Akasha's Distillation
    {
        Sekhmet's Gambit: 2
        $dictRead
        Gemini Decomposition
        Augur's Purification
        {
            Chirographer's Purification
            Flock's Disintegration
        }
        {
            Bookkeeper's Gambit: v
        }
        Augur's Exaltation
        Hermes' Gambit
    }
    Rotation Gambit
    Thoth's Gambit

    Gemini Decomposition
    Augur's Purification
    {
        Calligrapher's Purification
        Bookkeeper's Gambit: v-
    }
    {
        Bookkeeper's Gambit: vv
        Nullary Reflection
    }
    Augur's Exaltation
    Hermes' Gambit
)

// ==============================================================================
// ==========================           MISC           ==========================
// ==============================================================================

#def(dump)(
    Flock's Reflection
    Flock's Gambit
    {@str(<1>)}>>
    Speaker's Distillation
    Reveal
    Speaker's Decomposition
    Bookkeeper's Gambit: v
    Flock's Disintegration
)

#def(saferead)(
    Auditor's Reflection
    $fastif(
        Scribe's Reflection
    )()
)

#def(safewrite)(
    Assessor's Reflection
    $fastif(
        Scribe's Gambit
    )()
)

#def(isInWorldBounds)(
    Vector Disintegration
    Bookkeeper's Gambit: v-v
    Gemini Decomposition
    Spatial Reflection
    Atlas' Decomposition
    Reflecting Gambit
    Minimus Distillation II
    Reflecting Gambit
    Maximus Distillation II
    Conjunction Distillation
    // stack: bool
)

#def(casterInWorldBounds)(
    Mind's Reflection
    Compass' Purification II
    $isInWorldBounds
)

#def(hasMinMedia)(
    Mind's Reflection
    Media Purification
    Numerical Reflection: 20
    Subtractive Distillation
    Numerical Reflection: <1>
    Maximus Distillation II
)

// ==============================================================================
// ==========================         RAYCASTS         ==========================
// ==============================================================================

// return vector of the targeted block
#def(targetBlock)(
    Mind's Reflection
    Compass' Purification
    Mind's Reflection
    Alidade's Purification
    Archer's Distillation
)

// return vector representing the side of targeted block
#def(targetBlockFace)(
    Mind's Reflection
    Compass' Purification
    Mind's Reflection
    Alidade's Purification
    Architect's Distillation
)

// return vector of block that would be placed on the side of targeted block
#def(targetBlockOnBlockFace)(
    $targetBlock
    $targetBlockFace
    Additive Distillation
)

// return targeted entity iota
#def(targetEntity)(
    Mind's Reflection
    Compass' Purification
    Mind's Reflection
    Alidade's Purification
    Scout's Distillation
)


// ==============================================================================
// ==========================         CASSETTES        ==========================
// ==============================================================================

// starts thread to cast every n ticks 
// params - 
//      <1> name: string, 
//      <2> n: number, 
//      <3> loop: bool, 
//      <4> hex: many iotas
#def(start_thread)(
    {
        <4>
        $if(<3>)(
            {@str(<1>)} >>
            Program Purification
            Numerical Reflection: <2>
            {@str(<1>)} >>
            Enqueue
        )()
    }
    Numerical Reflection: <2>
    {@str(<1>)} >>
    Enqueue

)