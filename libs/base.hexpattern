// ==============================================================================
// ==============================================================================
// ==========================         PATTERNS         ==========================
// ==============================================================================
// ==============================================================================

#def(true)(
    True Reflection
)

#def(false)(
    False Reflection
)

#def(leftclick)(
    @pattern(NORTH_EAST,qadee)
)

#def(rightclick)(
    @pattern(NORTH_WEST,edaqq)
)

#def(iotatype)(
    @pattern(SOUTH_EAST,awd)
)

#def(bettersurgeon)(
    @pattern(EAST,dedqdewqaeaq)
)

#def(exposeMind)(
    @pattern(NORTH_EAST,eqeeedqadqqqqqdeewewewe)
)

#def(illuminate)(
    @pattern(SOUTH_EAST,aeaeaeaeaeawqqqqq)
)

#def(personal_property)(
    @pattern(SOUTH_WEST,wwwwwaqwwewwqwqqwwaeawqawwwwawwwwawwwqawwdww)
)

#def(personal_gate)(
    @pattern(SOUTH_WEST,wwwwwaqwwewwqwqqwwaeawqawwwqwwwawwwqa)
)

// ==============================================================================
// ==============================================================================
// ==========================          CONSTS          ==========================
// ==============================================================================
// ==============================================================================

#def(publicAmethystMote)(
    // Hexxy3
    // {@mote(9edbd419-fd25-4c1f-8642-4529366e40a8,pseudoamethyst_shard,12c34b86-7ded-46c7-b000-2398c879fb92)} >>


)


// ==============================================================================
// ==============================================================================
// ==========================           MISC           ==========================
// ==============================================================================
// ==============================================================================

#def(akasha)(
    // Hexxy3
    // {@vec(375, 53, 2484)} >>

    // Hexxy4
    {@vec(-391, 54, -694)} >>
)

#def(dump)(
    Flock's Reflection
    Flock's Gambit
    {@str(<1>)}>>
    Speaker's Distillation
    Reveal
    Speaker's Decomposition
    Bookkeeper's Gambit: v
    Flock's Disintegration
)

// ==============================================================================
// ==============================================================================
// ==========================        FUNCTIONS         ==========================
// ==============================================================================
// ==============================================================================

// ==============================================================================
// ==========================         BASE FUNC        ==========================
// ==============================================================================

#def(indexof)(
    Gemini Decomposition
    { @str(<1>) } >>
    Locator's Distillation
)

#def(centerVec)(
    Floor Purification
    {@vec(0.5,0.5,0.5)}>>
    Additive Distillation
)

// 6 + var patterns
// do (patterns) else (patterns) based on bool before
// Evaluates the second arg if true, evaluates the third if false
#def(fastif)(
    {
        <1>
    }
    {
        <2>
    }
    Augur's Exaltation
    Hermes' Gambit
)

// 6 + var patterns
// if (bool) do (patterns) else (patterns)
// Evaluates the second arg if true, evaluates the third if false
#def(if)(
    <1>
    $fastif(<2>)(<3>)
)

// 6 + var patterns
#def(runif)(
    <1>
    $fastif(<2>)()
)

// for_each in (list) do (patterns)
// Runs Thoth's on the given list and pattern list, returning a list containing all outputs
#def(foreach)(
    {
        <2>
    }
    <1>
    Thoth's Gambit
)

// prints passed string and removes it from stack
#def(print)(
    {@str(<1>)} >>
    Reveal
    Bookkeeper's Gambit: v
)

#def(akasharead)(
    $akasha
    Jester's Gambit
    Akasha's Distillation
)

#def(akashasaferead)(
    $akasharead
    Gemini Decomposition
    Augur's Purification
    $fastif()(
        Bookkeeper's Gambit: v
    )
)

#def(akashacast)(
    $akasharead
    Gemini Decomposition
    Augur's Purification
    $fastif(
        Hermes' Gambit
    )(
        Bookkeeper's Gambit: v
    )
)

// stack: string
#def(to_hexicon)(
    False Reflection
    Case Distillation
    Blank Reflection
    Separation Distillation
    Blank Reflection
    Single's Purification
    // Exclusion Distillation
    // $akasha
    Akasha's Distillation
        {
        [
            @str(?),
            @str(!),
            @str(+),
            @str(-),
            @str(*),
            @str(/),
            @str(=),
            @str(>),
            @str(<),
            @str(a),
            @str(b),
            @str(c),
            @str(d),
            @str(e),
            @str(f),
            @str(g),
            @str(h),
            @str(i),
            @str(j),
            @str(k),
            @str(l),
            @str(m),
            @str(n),
            @str(o),
            @str(p),
            @str(q),
            @str(r),
            @str(s),
            @str(t),
            @str(u),
            @str(v),
            @str(w),
            @str(x),
            @str(y),
            @str(z),
            @str(_)
        ],
        [
            @pattern(EAST,adwdeaae),
            @pattern(EAST,qqddqdaae),
            @pattern(EAST,qqdeeaaeedq),
            @pattern(NORTH_EAST,wdeaaedw),
            @pattern(EAST,qqddqaqddqaqddq),
            @pattern(NORTH_EAST,daqddqad),
            @pattern(EAST,qqddawaddq),
            @pattern(EAST,qqdeqe),
            @pattern(NORTH_EAST,eqedq),
            @pattern(NORTH_EAST,eda),
            @pattern(NORTH_EAST,wddaq),
            @pattern(NORTH_EAST,wedwa),
            @pattern(EAST,qaddw),
            @pattern(EAST,ade),
            @pattern(EAST,awdew),
            @pattern(NORTH_EAST,wdea),
            @pattern(NORTH_EAST,wedq),
            @pattern(EAST,aedea),
            @pattern(NORTH_EAST,wddaad),
            @pattern(EAST,awddada),
            @pattern(EAST,adaddwa),
            @pattern(EAST,aedw),
            @pattern(NORTH_EAST,dad),
            @pattern(EAST,adda),
            @pattern(NORTH_EAST,qddqad),
            @pattern(NORTH_EAST,daqddq),
            @pattern(NORTH_EAST,qdew),
            @pattern(NORTH_EAST,wdw),
            @pattern(NORTH_EAST,ee),
            @pattern(NORTH_EAST,qddae),
            @pattern(NORTH_EAST,qdedaq),
            @pattern(EAST,awddae),
            @pattern(NORTH_EAST,eaddwa),
            @pattern(EAST,qadedq),
            @pattern(NORTH_EAST,eaddq),
            @pattern(EAST,w)
        ]
    }
    {
        Sekhmet's Gambit: 2
        $dict_read
        Gemini Decomposition
        Augur's Purification
        {
            Chirographer's Purification
            Flock's Disintegration
        }
        {
            Bookkeeper's Gambit: v
        }
        Augur's Exaltation
        Hermes' Gambit
    }
    Rotation Gambit
    Thoth's Gambit

    Gemini Decomposition
    Augur's Purification
    {
        Calligrapher's Purification
        Bookkeeper's Gambit: v-
    }
    {
        Bookkeeper's Gambit: vv
        Nullary Reflection
    }
    Augur's Exaltation
    Hermes' Gambit
)

// ==============================================================================
// ==========================           MISC           ==========================
// ==============================================================================

#def(saferead)(
    Auditor's Reflection
    $fastif(
        Scribe's Reflection
    )()
)

#def(safewrite)(
    Assessor's Reflection
    $fastif(
        Scribe's Gambit
    )()
)

#def(isInWorldBounds)(
    Vector Disintegration
    Bookkeeper's Gambit: v-v
    Gemini Decomposition
    Spatial Reflection
    Atlas' Decomposition
    Reflecting Gambit
    Minimus Distillation II
    Reflecting Gambit
    Maximus Distillation II
    Conjunction Distillation
    // stack: bool
)

#def(casterInWorldBounds)(
    Mind's Reflection
    Compass' Purification II
    $isInWorldBounds
)

#def(hasMinMedia)(
    Mind's Reflection
    Media Purification
    Numerical Reflection: 20
    Subtractive Distillation
    Numerical Reflection: <1>
    Maximus Distillation II
)


// ==============================================================================
// ==========================        DICTIONARY        ==========================
// ==============================================================================

// stack: ,
#def(dict_create)(
    Vacant Reflection
    Vacant Reflection
    Numerical Reflection: 2
    Flock's Gambit
)

// stack: dict, key
#def(dict_read)(
    Jester's Gambit
    Flock's Disintegration
    Reflecting Gambit
    Locator's Distillation
    Gemini Decomposition
    Numerical Reflection: -1
    Equality Distillation
    {
        Bookkeeper's Gambit: vv
        Nullary Reflection
    }
    {
        Selection Distillation
    }
    Augur's Exaltation
    Hermes' Gambit
)

// stack: dict, key, value
#def(dict_write)(
    Rotation Gambit
    Flock's Disintegration
    Rotation Gambit
    Integration Distillation
    Rotation Gambit II
    Jester's Gambit
    Integration Distillation
    Jester's Gambit
    Numerical Reflection: 2
    Flock's Gambit
)

// stack: dict, key, value
#def(dict_over_write)(
    Reflecting Gambit
    Dioscuri Gambit
    Flock's Disintegration
    Bookkeeper's Gambit: v
    Jester's Gambit
    Locator's Distillation
    Gemini Decomposition
    Numerical Reflection: -1
    Equality Distillation
    {
        Bookkeeper's Gambit: v
        Bubbling Gambit
        Flock's Disintegration
        Rotation Gambit
        Integration Distillation
        Rotation Gambit II
        Jester's Gambit
        Integration Distillation
        Jester's Gambit
        Numerical Reflection: 2
        Flock's Gambit
    }
    {
        Bookkeeper's Gambit: v--
        Jester's Gambit
        Flock's Disintegration
        Numerical Reflection: 17
        Swindler's Gambit
        Surgeon's Exaltation
        Numerical Reflection: 2
        Flock's Gambit
    }
    Augur's Exaltation
    Hermes' Gambit
)

// stack: dict, key
#def(dict_remove)(
    Jester's Gambit
    Flock's Disintegration
    Reflecting Gambit
    Dioscuri Gambit
    Locator's Distillation
    Gemini Decomposition
    Numerical Reflection: -1
    Equality Distillation
    {
        Bookkeeper's Gambit: vv
        Jester's Gambit
    }
    {
        Bookkeeper's Gambit: v-
        Undertaker's Gambit
        Excisor's Distillation
        Rotation Gambit II
        Excisor's Distillation
    }
    Augur's Exaltation
    Hermes' Gambit
    Numerical Reflection: 2
    Flock's Gambit
)



// stack: value, name, list_of_names, list_of_values
// #def(dictsave)(
//     Reflecting Gambit
//     Dioscuri Gambit
//     // stack: value, list_of_values, list_of_names, name, list_of_names, name
//     Locator's Distillation
//     // stack: value, list_of_values, list_of_names, name, index
//     Numerical Reflection: -1
//     Equality Distillation
//     // stack: value, list_of_values, list_of_names, name
//     $fastif(
//         Single's Purification
//         Additive Distillation
//         Reflecting Gambit
//         Single's Purification
//         Additive Distillation
//         // stack: list_of_names, list_of_values
//     )(
//         // stack: value, list_of_values, list_of_names, name
//         Dioscuri Gambit
//         Locator's Distillation
//         Bookkeeper's Gambit: v-
//         Rotation Gambit II
//         // stack: value, index, list_of_values, list_of_names
//         Numerical Reflection: 4
//         Flock's Gambit
//         Retrograde Purification
//         Flock's Disintegration
//         // stack: list_of_names, list_of_values, index, value
//         Surgeon's Exaltation
//         // stack: list_of_names, list_of_values
//     )
// )

// stack: ... , varname
#def(varread)(
    $personal_property
    Observation Purification
    Flock's Disintegration
    $dictread
    // stack: ... , varvalue
)

// stack: ... ,value, varname
#def(varsave)(
    $personal_property
    Observation Purification
    Flock's Disintegration
    $dictsave
    Numerical Reflection: 2
    Flock's Gambit
    $personal_property
    Jester's Gambit
    Schrödinger's Gambit
    // stack: ... , 
)


// ==============================================================================
// ==========================         RAYCASTS         ==========================
// ==============================================================================

// return vector of the targeted block
#def(target_block)(
    Mind's Reflection
    Compass' Purification
    Mind's Reflection
    Alidade's Purification
    Archer's Distillation
)

// return vector representing the side of targeted block
#def(target_block_face)(
    Mind's Reflection
    Compass' Purification
    Mind's Reflection
    Alidade's Purification
    Architect's Distillation
)

// return vector of block that would be placed on the side of targeted block
#def(target_block_on_block_face)(
    $target_block
    $target_block_face
    Additive Distillation
)

// return targeted entity iota
#def(target_entity)(
    Mind's Reflection
    Compass' Purification
    Mind's Reflection
    Alidade's Purification
    Scout's Distillation
)


// ==============================================================================
// ==========================         CASSETTES        ==========================
// ==============================================================================

// checks if there is a free cassette or if cassette under the same name is running, if not, terminates the hex
#def(check_for_free_cassette)(
    $if(
        {@str(<1>)} >>
        Program Purification
        Augur's Purification
    )(
        $print(Restarting cassette...)
    )(
        $if(
            Threading Reflection II
            Numerical Reflection: 0
            Equality Distillation
        )(
            $print(No free cassettes, terminating thread!)
            Janus' Gambit
        )( 
            $print(Free cassette available, proceeding...)
        )
    )
)

// starts thread to cast every n ticks 
// params - 
//      <1> name: string, 
//      <2> n: number, 
//      <3> loop: bool, 
//      <4> hex: many iotas
#def(start_thread)(
    {
        <4>
        $if(<3>)(
            {@str(<1>)} >>
            Program Purification
            Numerical Reflection: <2>
            {@str(<1>)} >>
            Enqueue
        )()
    }
    Numerical Reflection: <2>
    {@str(<1>)} >>
    Enqueue

)

// if one of the passed arguments is "stop" stops or dequeues the hex, prints message with passed name
// params - 
//      <1> name: string
#def(stop_detect)(
    $runif( // 6base + 47 = 53
        Flock's Reflection
        Augur's Purification
    )(
        $runif( // 6base + 39 = 45
            Gemini Decomposition
            {@str(stop)}>> // 4
            Locator's Distillation
            Numerical Reflection: -1
            Inequality Distillation
        )(
            $runif( // 6base + 18 = 24
                {@str(<1>)} >> // 4
                Program Purification II
                Nullary Reflection
                Inequality Distillation
            )(
                // if it is cassette, dequeue
                {@str(<1>)} >> // 4
                Dequeue
                $print(Killing thread <1>) //6
            )
            // stop it
            $print(Stopping <1>) // 6
            Janus' Gambit
        )
    )
)