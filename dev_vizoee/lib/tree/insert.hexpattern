// #def(stringSplit)(#git(/dev_vizoee/lib/string/split.hexpattern))
#git(/libs/base.hexpattern)

#def(traverse_tree_index)(Numerical Reflection: 0)
#def(merge_tree_index)(Numerical Reflection: 1)

// // stack: tree, key_string, value
// Rotation Gambit II
// $stringSplit
// Numerical Reflection: 0
// Numerical Reflection: 3
// Flock's Gambit
// Single's Purification
// {
//     // stack: value, [tree, key_char_list, key_index]
//     /*
//     iteration begining stack: [values:[], operation index]

//     if parsed all key: 
//             remove everything except value
//             v2: push to tree value under null
//         while there are iterations:
//             get iteration ([parent_node, char])
//             push node to iteration
//         leave on stack only new tree
//     else
//         get branch/create new one
//         add next iteration for merging tree back again (this one will be pop using Seshat's Gambit)
//             iteration value: [parent_node, char] -> will put new_node to parent_node on char key
//             V3: storing new_node/value in ravenmind and iteration simply adds to its tree key ravenmind and saves it back to RM
//         add next iteration for traversing branch
//     */

//     Prospector's Gambit
//     Length Purification
//     Prospector's Gambit
//     // stack: ... key_len, index
//     Minimus Distillation II
//     // stack: value, tree, key_char_list, key_index
//     {// end of key
//         Bookkeeper's Gambit: vv
//         Nullary Reflection
//         Rotation Gambit
//         $dictOverwrite
//         Sekhmet's Gambit: 1
        
//     }
//     {// parse key

//     }
//     Augur's Exaltation
//     Hermes' Gambit
// }
// Jester's Gambit
// Thoth's Gambit

// // V3


// stack: tree, key_string, value
// operations:
    // traverse existing node - default - key didn't end, node exists
        // values: tree, key, index
    // creating new nodes
    // end of key
    // reassembling tree
Huginn's Gambit
Numerical Reflection: 0
Numerical Reflection: 3
Flock's Gambit
{// opp 1
    // entering tree deeper
    // stack: [tree, key, key_index]
    Flock's Disintegration

    Prospector's Gambit
    Length Purification
    Prospector's Gambit
    // stack: ... key_len, index
    Minimus Distillation II
    // stack: value, tree, key_char_list, key_index
    {// end of key
        Bookkeeper's Gambit: vv
        Jester's Gambit
        Nullary Reflection
        
    }
    {// parse key
        Numerical Reflection: 3
        Dioscuri Gambit II
        Selection Distillation
        Undertaker's Gambit
        $dictRead
        // stack: tree, key, key_index, key_char, node/null

        // If empty create new node
        Gemini Decomposition
        Augur's Purification
        {}
        {
            $dictCreate
        }
        Augur's Exaltation
        Hermes' Gambit
        
        // stack: tree, key, key_index, key_char, node
        /*
        to next iter:
            node
            key_index+1 
            key
        to last iter:
            tree
            key_char
        */

        Numerical Reflection: 3
        Fisherman's Gambit
        Numerical Reflection: 2
        Fisherman's Gambit
        Numerical Reflection: 1
        Additive Distillation

        // stack: tree, key_char, node, key, key_index+1
        Numerical Reflection: 3
        Flock's Gambit
        // stack: tree, key_char, [node, key, key_index+1]
        Rotation Gambit II
        // stack: [node, key, key_index+1], tree, key_char
        Numerical Reflection: 2
        Flock's Gambit
        $merge_tree_index
        Numerical Reflection: 2
        Flock's Gambit
        Castor's Gambit
        
        // stack: [node, key, key_index+1]
        $traverse_tree_index
        Numerical Reflection: 2
        Flock's Gambit
        Castor's Gambit
        Sekhmet's Gambit: 0
    }
    Augur's Exaltation
    Hermes' Gambit
}
{// opp 2
    // merging tree
    // ravenmind: value
    // stack: [node, key_char]
    Flock's Disintegration
    Muninn's Reflection
    $dictOverwrite
    Huginn's Gambit
}
Numerical Reflection: 2
Flock's Gambit
{
    Sekhmet's Gambit: 2
    // stack: operatino_list, [values:[...], opperation_number]
    Flock's Disintegration
    Bubbling Gambit
    Selection Distillation
    Hermes' Gambit
}
Rotation Gambit

$traverse_tree_index
Numerical Reflection: 2
Flock's Gambit

Single's Purification
Thoth's Gambit
